@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Real Time Dashboard</title>
</head>
<body style="margin: 0; width: var(--width); height: calc(var(--width)*2); font-family: Arial, sans-serif; overflow: hidden; font-size: calc(var(--width)/10); ">
    <script>
        // Sensor data object to store all sensor values
        let sensorData = {
            temperature: { value: null, loading: true },
            api: { value: null, loading: true },
            humidity: { value: null, loading: true },
            ph: { value: null, loading: true },
            pm10: { value: null, loading: true },
            pm25: { value: null, loading: true }
        };

        // Canvas chart drawing function
        function drawAPIChart() {
            const canvas = document.getElementById('apiChart');
            if (!canvas) return;

            const ctx = canvas.getContext('2d');
            const centerX = canvas.width / 2;
            const centerY = canvas.height / 2;
            const radius = canvas.height / 2.2;

            // Clear canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Get current API value - if null/loading, show default empty circle
            const apiValue = sensorData.api.value ? parseFloat(sensorData.api.value) : 0;
            const maxValue = 500;
            const progress = Math.min(apiValue / maxValue, 1);

            // Determine color based on API value according to guidelines
            let color = '#ffffff'; // Default white for no data
            if (apiValue > 0) {
                if (apiValue <= 100) color = '#00BFFF';      // Good (Blue)
                else if (apiValue <= 200) color = '#32CD32'; // Moderate (Green)
                else if (apiValue <= 300) color = '#FFFF00'; // Unhealthy (Yellow)
                else if (apiValue <= 400) color = '#FF8C00'; // Very Unhealthy (Orange)
                else color = '#FF0000';                      // Hazardous (Red)
            }

            // Draw outer circle (background)
            ctx.beginPath();
            ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
            ctx.strokeStyle = '#ffffff';
            ctx.lineWidth = 5;
            ctx.stroke();

            // Only draw progress arc if we have valid data
            if (apiValue > 0 && !sensorData.api.loading) {
                // Draw progress arc with guideline color
                ctx.beginPath();
                ctx.arc(centerX, centerY, radius, -Math.PI/2, -Math.PI/2 + (progress * 2 * Math.PI));
                ctx.strokeStyle = color;
                ctx.lineWidth = 5;
                ctx.stroke();

                // Draw big dot at the end of progress arc
                const endAngle = -Math.PI/2 + (progress * 2 * Math.PI);
                const dotX = centerX + radius * Math.cos(endAngle);
                const dotY = centerY + radius * Math.sin(endAngle);

                ctx.beginPath();
                ctx.arc(dotX, dotY, 6, 0, 2 * Math.PI);
                ctx.fillStyle = color;
                ctx.fill();

                // Add white border around the dot
                ctx.beginPath();
                ctx.arc(dotX, dotY, 6, 0, 2 * Math.PI);
                ctx.strokeStyle = '#ffffff';
                ctx.lineWidth = 2;
                ctx.stroke();
            }
        }

        // Function to update date and time in header
        function updateDateTime() {
            const now = new Date();

            // Format date: "15 Aug 2025 / Friday"
            const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
            const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
                              'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

            const dayName = dayNames[now.getDay()];
            const day = now.getDate();
            const month = monthNames[now.getMonth()];
            const year = now.getFullYear();

            const dateString = `${day} ${month} ${year} / ${dayName}`;

            // Format time: "09:10AM"
            let hours = now.getHours();
            const minutes = now.getMinutes();
            const ampm = hours >= 12 ? 'PM' : 'AM';
            hours = hours % 12;
            hours = hours ? hours : 12; // the hour '0' should be '12'
            const minutesStr = minutes < 10 ? '0' + minutes : minutes;
            const timeString = `${hours}:${minutesStr}${ampm}`;

            // Update the header display elements
            const dateDisplay = document.getElementById('dateDisplay');
            const timeDisplay = document.getElementById('timeDisplay');
            if (dateDisplay) dateDisplay.textContent = dateString;
            if (timeDisplay) timeDisplay.textContent = timeString;

            console.log('DateTime updated:', dateString, timeString);
        }
        function getAPIStatus(value) {
            const apiValue = parseFloat(value) || 0;
            if (apiValue <= 100) return 'Good';
            else if (apiValue <= 200) return 'Moderate';
            else if (apiValue <= 300) return 'Unhealthy';
            else if (apiValue <= 400) return 'Very Unhealthy';
            else return 'Hazardous';
        }

        // Function to get API status color
        function getAPIStatusColor(value) {
            const apiValue = parseFloat(value) || 0;
            if (apiValue <= 100) return '#00BFFF';
            else if (apiValue <= 200) return '#32CD32';
            else if (apiValue <= 300) return '#FFFF00';
            else if (apiValue <= 400) return '#FF8C00';
            else return '#FF0000';
        }

        // Function to get API status color
        function getNewsMessage(value) {
            const apiValue = parseFloat(value) || 0;
            if (apiValue <= 100) return "The weather is looking perfect today. It's a wonderful time to head out doors, get active and enjoy some fresh air. 11";
            else if (apiValue <= 200) return "The weather is looking perfect today. It's a wonderful time to head out doors, get active and enjoy some fresh air. 12";
            else if (apiValue <= 300) return "The weather is looking perfect today. It's a wonderful time to head out doors, get active and enjoy some fresh air. 13";
            else if (apiValue <= 400) return "The weather is looking perfect today. It's a wonderful time to head out doors, get active and enjoy some fresh air. 14";
            else return "The weather is looking perfect today. It's a wonderful time to head out doors, get active and enjoy some fresh air. 15";
        }

        // Function to update UI elements with current sensor data
        function updateUI() {
            // Update API chart
            drawAPIChart();

            // Update API value and status in the center of the chart
            const apiValueElement = document.getElementById('apiValue');
            const apiStatusElement = document.getElementById('apiStatus');
            const newsContent = document.getElementById('newsContent');
            if (apiValueElement && apiStatusElement) {
                if (sensorData.api.loading) {
                    apiValueElement.textContent = '...';
                    apiStatusElement.textContent = '...';
                    newsContent.textContent = '...';
                    apiStatusElement.style.color = '#ffffff';
                } else if (sensorData.api.value === null || sensorData.api.value === 'Error') {
                    apiValueElement.textContent = 'N/A';
                    apiStatusElement.textContent = 'No Data';
                    apiStatusElement.style.color = '#ffffff';
                    newsContent.textContent = 'Hello World';
                } else {
                    apiValueElement.textContent = sensorData.api.value;
                    apiValueElement.style.color = getAPIStatusColor(sensorData.api.value);
                    apiStatusElement.textContent = getAPIStatus(sensorData.api.value);
                    apiStatusElement.style.color = getAPIStatusColor(sensorData.api.value);
                    newsContent.textContent = getNewsMessage(sensorData.api.value);
                }
            }

            // Update temperature
            const tempElement = document.getElementById('temperature');
            if (tempElement) {
                if (sensorData.temperature.loading) {
                    tempElement.textContent = '...';
                } else if (sensorData.temperature.value === null || sensorData.temperature.value === 'Error') {
                    tempElement.textContent = 'N/A';
                } else {
                    tempElement.textContent = `${sensorData.temperature.value}°C`;
                }
            }

            // Update humidity
            const humidityElement = document.getElementById('humidity');
            if (humidityElement) {
                if (sensorData.humidity.loading) {
                    humidityElement.textContent = '...';
                } else if (sensorData.humidity.value === null || sensorData.humidity.value === 'Error') {
                    humidityElement.textContent = 'N/A';
                } else {
                    humidityElement.textContent = `${sensorData.humidity.value}%`;
                }
            }

            // Update PM2.5
            const pm25Element = document.getElementById('pm25Value');
            if (pm25Element) {
                if (sensorData.pm25.loading) {
                    pm25Element.innerHTML = '...';
                } else if (sensorData.pm25.value === null || sensorData.pm25.value === 'Error') {
                    pm25Element.innerHTML = 'N/A';
                } else {
                    pm25Element.innerHTML = `${sensorData.pm25.value} <span style="font-size: 0.6em;">pg/m3</span>`;
                }
            }

            // Update PM10
            const pm10Element = document.getElementById('pm10Value');
            if (pm10Element) {
                if (sensorData.pm10.loading) {
                    pm10Element.innerHTML = '...';
                } else if (sensorData.pm10.value === null || sensorData.pm10.value === 'Error') {
                    pm10Element.innerHTML = 'N/A';
                } else {
                    pm10Element.innerHTML = `${sensorData.pm10.value} <span style="font-size: 0.6em;">pg/m3</span>`;
                }
            }

            // Update timestamp
            const timestampElement = document.getElementById('timestamp');
            if (timestampElement) {
                const now = new Date();
                const options = {
                    weekday: 'long',
                    day: '2-digit',
                    month: 'short',
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit',
                    hour12: true
                };
                const dateStr = now.toLocaleDateString('en-GB', options);
                const timeStr = now.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: true });

                document.getElementById('dateDisplay').textContent = dateStr.split(',')[0] + ', ' + dateStr.split(' ').slice(1, 4).join(' ');
                document.getElementById('timeDisplay').textContent = timeStr;
            }

            console.log('UI updated with latest sensor data');
        }

        function updateAllSensorData() {
            console.log('=== FETCHING SENSOR DATA ===');
            console.log('Request URL:', window.location.origin + '/Home/GetAirAndWaterSensorValue');

            // Set loading state
            Object.keys(sensorData).forEach(key => {
                sensorData[key].loading = true;
            }); 
            updateUI();

            fetch('@Url.Action("GetAirAndWaterSensorValue")', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                credentials: 'same-origin'
            })
            .then(response => {
                console.log('Response status:', response.status);
                console.log('Response headers:', response.headers);
                console.log('Response URL:', response.url);

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}, statusText: ${response.statusText}`);
                }

                // Check if response is actually JSON
                const contentType = response.headers.get('content-type');
                if (!contentType || !contentType.includes('application/json')) {
                    throw new Error(`Expected JSON response but got: ${contentType}`);
                }

                return response.json();
            })
            .then(data => {
                console.log('Received data:', data.data);

                // Update temperature
                if (data.data.temperature !== null && data.data.temperature !== undefined) {
                    sensorData.temperature.value = parseFloat(data.data.temperature).toFixed(1);
                    sensorData.temperature.loading = false;
                    console.log('Temperature updated:', sensorData.temperature.value);
                } else {
                    console.warn('Temperature data is null/undefined');
                    sensorData.temperature.value = 'Error';
                    sensorData.temperature.loading = false;
                }

                // Update air quality (API)
                if (data.data.overallAPI !== null && data.data.overallAPI !== undefined) {
                    sensorData.api.value = Math.round(data.data.overallAPI).toString();
                    sensorData.api.loading = false;
                    console.log('API updated:', sensorData.api.value);
                } else {
                    console.warn('OverallAPI data is null/undefined');
                    sensorData.api.value = 'Error';
                    sensorData.api.loading = false;
                }

                // Update humidity
                if (data.data.humidity !== null && data.data.humidity !== undefined) {
                    sensorData.humidity.value = Math.round(data.data.humidity).toString();
                    sensorData.humidity.loading = false;
                    console.log('Humidity updated:', sensorData.humidity.value);
                } else {
                    console.warn('Humidity data is null/undefined');
                    sensorData.humidity.value = 'Error';
                    sensorData.humidity.loading = false;
                }

                // Update pH
                if (data.data.pH !== null && data.data.pH !== undefined) {
                    sensorData.ph.value = parseFloat(data.data.pH).toFixed(1);
                    sensorData.ph.loading = false;
                    console.log('pH updated:', sensorData.ph.value);
                } else {
                    console.warn('pH data is null/undefined');
                    sensorData.ph.value = 'Error';
                    sensorData.ph.loading = false;
                }

                // Update PM10
                if (data.data.pm10 !== null && data.data.pm10 !== undefined) {
                    sensorData.pm10.value = parseFloat(data.data.pm10).toFixed(1);
                    sensorData.pm10.loading = false;
                    console.log('PM10 updated:', sensorData.pm10.value);
                } else {
                    console.warn('PM10 data is null/undefined');
                    sensorData.pm10.value = 'Error';
                    sensorData.pm10.loading = false;
                }

                // Update PM2.5
                if (data.data.pm25 !== null && data.data.pm25 !== undefined) {
                    sensorData.pm25.value = parseFloat(data.data.pm25).toFixed(1);
                    sensorData.pm25.loading = false;
                    console.log('PM2.5 updated:', sensorData.pm25.value);
                } else {
                    console.warn('PM2.5 data is null/undefined');
                    sensorData.pm25.value = 'Error';
                    sensorData.pm25.loading = false;
                }

                updateUI();
                console.log('=== SENSOR DATA UPDATE COMPLETE ===');
            })
            .catch(error => {
                console.error('Fetch error details:');
                console.error('Error type:', error.constructor.name);
                console.error('Error message:', error.message);
                console.error('Error stack:', error.stack);
                console.error('Full error object:', error);

                // Set all sensors to error state
                Object.keys(sensorData).forEach(key => {
                    sensorData[key].value = 'Error';
                    sensorData[key].loading = false;
                });
                updateUI();
            });
        }

        // Initialize dashboard when page loads
        window.onload = function() {
            console.log('Dashboard initializing...');

            // Update date/time immediately
            updateDateTime();

            // Draw initial chart
            drawAPIChart();
            updateUI();

            // Fetch initial data
            updateAllSensorData();

            // Set up interval to update date/time every minute (60 seconds)
            const dateTimeInterval = setInterval(() => {
                updateDateTime();
            }, 60 * 1000); // Update every minute

            // Set up interval to fetch data every 1000 seconds (16.67 minutes)
            const fetchInterval = setInterval(() => {
                console.log('Scheduled data fetch triggered');
                updateAllSensorData();
            }, 60 * 1000); // 1000 seconds = 1,000,000 milliseconds

            console.log('Dashboard initialized. DateTime updates every minute, sensor data refreshes every 1000 seconds.');

            // Store interval IDs globally so they can be cleared if needed
            window.dateTimeInterval = dateTimeInterval;
            window.sensorDataInterval = fetchInterval;
        };

        // Function to manually refresh data (can be called from console or button)
        function refreshData() {
            console.log('Manual data refresh triggered');
            updateAllSensorData();
        }
    </script>
    <style>
        :root {
            --width: 200px;
        }
    </style>
    <div style="width:100%; height: 100%; background-color: #262f40; color:white; display: flex; flex-direction: column;">
        <div style="text-align: center; flex-shrink: 0; height: 10%">
            <div style="display: flex; font-size: 50%; color: #262f40; padding: 0; margin: 0;">
                <div id="dateDisplay" style="flex: 0 0 60.5%; background-color: white; padding: 2%;">
                    23 Jul 2025 / Friday
                </div>
                <div style="flex: 0 0 0.5%;">
                </div>
                <div id="timeDisplay" style="flex: 0 0 31%; background-color: white; font-weight: 700; padding: 2%;">
                    09:10AM
                </div>
            </div>
            <div style="color: white; padding: 2% 0; font-size: 75%; font-weight: 600;">
                Air Pollution Index
            </div>
        </div>
        <div style="background-color: white; height: 0.5%; width: 100%; flex-shrink: 0;"></div>
        <div style="color: white; padding: 3% 3% 0 3%; flex: 1; display: flex; flex-direction: column; height: 66%">
            <div style="position:relative; flex-shrink: 0; margin-bottom: 3%; height: 50%">
                <div style="text-align: center; margin-bottom: 3%; font-size: 75%;">API Performance</div>
                <div style="text-align: center; height: 75%; display: flex; align-items: center; justify-content: center; flex-direction: column; position: relative;">
                    <canvas id="apiChart" style="width:100%; object-fit:contain"></canvas>
                    <div style="position: absolute; top: 30%; left: 50%; transform: translate(-50%, -50%);
                        width: 30%; height: 30%;
                        background: url('../images/arrow.svg') no-repeat center;
                        background-size: contain;">
                    </div>
                    <div style="position: absolute; top: 70%; left: 50%; transform: translate(-50%, -50%); text-align: center;">
                        <div id="apiValue" style="font-weight: bold; font-size: 100%; color: #ffffff;">N/A</div>
                        <div id="apiStatus" style="font-size: 80%; font-weight:100; color: #ffffff;">No Data</div>
                    </div>
                </div>
            </div>

            <div style="display: flex; margin-bottom: 5%; flex-shrink: 0;">
                <div style="flex: 1; text-align: center; padding: 0 1.8%;">
                    <div style="text-align: center; margin-bottom: 0 1.8%; font-size: 40%; color: #FFFF00; font-weight: bold;">
                        PM2.5
                    </div>
                    <div id="pm25Value" style="font-size: 87.5%; font-weight: 100;">
                        N/A
                    </div>
                </div>
                <div style="flex: 1; text-align: center; padding: 0 1.8%;">
                    <div style="text-align: center; margin-bottom: 0 1.8%; font-size: 40%; color: #FFFF00; font-weight: bold;">
                        PM10
                    </div>
                    <div id="pm10Value" style="font-size: 87.5%; font-weight: 100;">
                        N/A
                    </div>
                </div>
            </div>

            <div style="display: flex; flex-shrink: 0; align-items: center;">
                <div style="flex: 0 0 13.5%"></div>
                <div style="position:relative; flex: 0 0 33%; text-align: left; display: flex; align-items: start; padding-top:3%">
                    <div>
                        <div style="margin-bottom: 12.5%; font-size: 40%;">
                            Temperature:
                        </div>
                        <div id="temperature" style="font-size: 70%; font-weight: bold;">
                            N/A
                        </div>
                    </div>
                    <div style="position:absolute; top:0; right:0; font-size: 70%; margin-left: 18.75%;">
                        🌡️
                    </div>
                </div>

                <div style="flex: 0 0 5.1%;"></div>
                <div style="flex: 0 0 0.3%; width: 1px; height: 100%; background-color: white;"></div>
                <div style="flex: 0 0 5.1%;"></div>

                <div style="position:relative; flex: 0 0 30%; text-align: left; display: flex; align-items: center; padding-top:3%">
                    <div>
                        <div style="margin-bottom: 12.5%; font-size: 40%;">
                            Humidity:
                        </div>
                        <div id="humidity" style="font-size: 70%; font-weight: bold;">
                            N/A
                        </div>
                    </div>
                    <div style="position:absolute; top:0; left:43%; font-size: 70%; margin-left: 18.75%;">
                        💧
                    </div>
                </div>
                <div style="flex: 0 0 14.5%"></div>
            </div>

            <div style="font-size: 56.25%; line-height: 1.3; flex-shrink: 0; padding-inline: 1%">
                <div style="text-align:center; color: white; padding: 2% 0; font-size: 80%; font-weight: bold;">
                    <i>News:</i>
                </div>
                <div id="newsContent" style="text-align:center; font-size: 60%">
                    <i>The weather is looking perfect today. It's a wonderful time to head out doors, get active and enjoy some fresh air. 1</i>
                </div>
            </div>
        </div>
        <div style="color: white; flex-shrink: 0; height: 21%">
            <table style="width: 100%; border-collapse: collapse; font-size: 40%; font-weight:600">
                <tr style="background-color: white; color: #262f40; font-weight: 600;">
                    <td style="text-align: center; border: none; padding: 1.25%; " colspan="2">
                        Air Pollution Index Guideline
                    </td>
                </tr>
                <tr>
                    <td style="text-align: center; border: none; border-right: 1px solid white; padding: 0.625%;">Status</td>
                    <td style="text-align: center; border: none; padding: 0.625%;">API</td>
                </tr>
                <tr style="background-color: #00BFFF; color: #262f40;">
                    <td style="text-align: center; border: none; border-right: 1px solid white; padding: 0.625%;">Good</td>
                    <td style="text-align: center; border: none; padding: 0.625%;">1-100</td>
                </tr>
                <tr style="background-color: #32CD32; color: #262f40;">
                    <td style="text-align: center; border: none; border-right: 1px solid white; padding: 0.625%;">Moderate</td>
                    <td style="text-align: center; border: none; padding: 0.625%;">101-200</td>
                </tr>
                <tr style="background-color: #FFFF00; color: #262f40;">
                    <td style="text-align: center; border: none; border-right: 1px solid white; padding: 0.625%;">Unhealthy</td>
                    <td style="text-align: center; border: none; padding: 0.625%;">201-300</td>
                </tr>
                <tr style="background-color: #FF8C00; color: #262f40;">
                    <td style="text-align: center; border: none; border-right: 1px solid white; padding: 0.625%;">Very Unhealthy</td>
                    <td style="text-align: center; border: none; padding: 0.625%;">301-400</td>
                </tr>
                <tr style="background-color: #FF0000; color: #262f40;">
                    <td style="text-align: center; border: none; border-right: 1px solid white; padding: 0.625%;">Hazardous</td>
                    <td style="text-align: center; border: none; padding: 0.625%;">401-500+</td>
                </tr>
            </table>
        </div>
    </div>
</body>
</html>